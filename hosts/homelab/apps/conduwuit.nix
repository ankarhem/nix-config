{
  pkgs,
  lib,
  ...
}: let
  conduwuit.port = 8448;
  element-web.port = 8009;
  maubot.port = 29316;
in {
  # Containers
  virtualisation.oci-containers.containers."conduwuit" = {
    image = "girlbossceo/conduwuit:latest";
    environment = {
      "CONDUWUIT_ADDRESS" = "0.0.0.0";
      "CONDUWUIT_CONFIG" = "/etc/conduwuit.toml";
      "CONDUWUIT_PORT" = toString conduwuit.port;
    };
    volumes = [
      "/var/lib/matrix/conduwuit/.registry_tokens:/etc/conduwuit/.registry_tokens:rw"
      "/var/lib/matrix/conduwuit/conduwuit.toml:/etc/conduwuit.toml:rw"
      "/var/lib/matrix/conduwuit/db:/var/lib/conduwuit:rw"
    ];
    ports = [
      "${toString conduwuit.port}:${toString conduwuit.port}/tcp"
    ];
    log-driver = "journald";
    extraOptions = [
      "--network-alias=conduwuit"
      "--network=nginx"
    ];
  };
  systemd.services."podman-conduwuit" = {
    serviceConfig = {
      Restart = lib.mkOverride 90 "always";
    };
    partOf = [
      "podman-compose-matrix-root.target"
    ];
    wantedBy = [
      "podman-compose-matrix-root.target"
    ];
  };
  virtualisation.oci-containers.containers."element-web" = {
    image = "vectorim/element-web:latest";
    ports = [
      "${toString element-web.port}:80/tcp"
    ];
    dependsOn = [
      "conduwuit"
    ];
    log-driver = "journald";
    extraOptions = [
      "--network-alias=element-web"
      "--network=nginx"
    ];
  };
  systemd.services."podman-element-web" = {
    serviceConfig = {
      Restart = lib.mkOverride 90 "always";
    };
    partOf = [
      "podman-compose-matrix-root.target"
    ];
    wantedBy = [
      "podman-compose-matrix-root.target"
    ];
  };
  virtualisation.oci-containers.containers."maubot" = {
    image = "dock.mau.dev/maubot/maubot:v0.5.1";
    volumes = [
      "/var/lib/matrix/maubot:/data:rw"
    ];
    ports = [
      "${toString maubot.port}:${toString maubot.port}/tcp"
    ];
    log-driver = "journald";
    extraOptions = [
      "--network-alias=maubot"
      "--network=nginx"
    ];
  };
  systemd.services."podman-maubot" = {
    serviceConfig = {
      Restart = lib.mkOverride 90 "always";
    };
    partOf = [
      "podman-compose-matrix-root.target"
    ];
    wantedBy = [
      "podman-compose-matrix-root.target"
    ];
  };
  virtualisation.oci-containers.containers."mautrix-instagram" = {
    image = "dock.mau.dev/mautrix/meta:v0.4.4";
    volumes = [
      "/var/lib/matrix/instagram-bridge:/data:rw"
    ];
    log-driver = "journald";
    extraOptions = [
      "--network-alias=mautrix-instagram"
      "--network=nginx"
    ];
  };
  systemd.services."podman-mautrix-instagram" = {
    serviceConfig = {
      Restart = lib.mkOverride 90 "always";
    };
    partOf = [
      "podman-compose-matrix-root.target"
    ];
    wantedBy = [
      "podman-compose-matrix-root.target"
    ];
  };
  virtualisation.oci-containers.containers."mautrix-telegram" = {
    image = "dock.mau.dev/mautrix/telegram:v0.15.2";
    volumes = [
      "/var/lib/matrix/telegram-bridge:/data:rw"
    ];
    log-driver = "journald";
    extraOptions = [
      "--network-alias=mautrix-telegram"
      "--network=nginx"
    ];
  };
  systemd.services."podman-mautrix-telegram" = {
    serviceConfig = {
      Restart = lib.mkOverride 90 "always";
    };
    partOf = [
      "podman-compose-matrix-root.target"
    ];
    wantedBy = [
      "podman-compose-matrix-root.target"
    ];
  };

  # Root service
  # When started, this will automatically create all resources and start
  # the containers. When stopped, this will teardown all resources.
  systemd.targets."podman-compose-matrix-root" = {
    unitConfig = {
      Description = "Root target generated by compose2nix.";
    };
    wantedBy = ["multi-user.target"];
  };

  # Nginx
  services.nginx.virtualHosts."matrix.internetfeno.men" = {
    addSSL = true;
    enableACME = true;

    extraConfig = ''
      listen 8448 ssl http2 default_server;

      client_max_body_size 50M;
    '';
    locations."/" = {
      proxyPass = "http://127.0.0.1:${toString conduwuit.port}";
    };
  };
}
